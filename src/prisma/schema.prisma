generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity", "fullTextSearch", "fullTextIndex"]
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

model User {
    id        String   @id @default(cuid())
    name      String
    email     String   @unique
    password  String
    birthdate DateTime @db.Date

    status String @default("valid")

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    conversations       Conversation[]
    companies_reports   CompanyReport[]
    users_reports       UserReport[]
    users_notifications UserNotification[]
    BannedUser          BannedUser[]

    @@map("users")
}

model Company {
    id                  String @id @default(cuid())
    name                String
    cnpj                String @unique
    email               String @unique
    phone               String
    password            String
    profile_picture_url String
    status              String @default("review")

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    address Address?

    conversations       Conversation[]
    items               Item[]
    companies_reports   CompanyReport[]
    users_reports       UserReport[]
    CompanyNotification CompanyNotification[]
    BannedCompany       BannedCompany[]

    @@fulltext([name])
    @@map("companies")
}

model Admin {
    id       String @id @default(cuid())
    name     String
    email    String @unique
    password String

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    @@map("admins")
}

model Address {
    id       String @id @default(cuid())
    street   String
    district String
    city     String
    uf       String
    cep      String
    number   String

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    company    Company @relation(fields: [company_id], references: [id])
    company_id String  @unique

    @@map("addresses")
}

model Item {
    id          String      @id @default(cuid())
    name        String
    color       String
    local       String
    description String
    images      ItemImage[]
    category    String

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    company    Company? @relation(fields: [company_id], references: [id])
    company_id String?

    @@fulltext([name])
    @@fulltext([name, description])
    @@map("items")
}

model ItemImage {
    id        String @id @default(cuid())
    image_url String

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    item_id String
    item    Item   @relation(fields: [item_id], references: [id])

    @@map("item_images")
}

model Conversation {
    id String @id @default(cuid())

    user    User?   @relation(fields: [user_id], references: [id])
    user_id String?

    company    Company? @relation(fields: [company_id], references: [id])
    company_id String?

    messages Message[]

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    @@unique(fields: [user_id, company_id])
    @@map("conversations")
}

model Message {
    id String @id @default(cuid())

    content   String
    sender_id String

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    conversation    Conversation? @relation(fields: [conversation_id], references: [id])
    conversation_id String?

    @@map("messages")
}

model CompanyReport {
    id String @id @default(cuid())

    message String
    images  ReportImage[]

    denounced    Company @relation(fields: [denounced_id], references: [id])
    denounced_id String

    denouncer    User   @relation(fields: [denouncer_id], references: [id])
    denouncer_id String

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    @@map("companies_reports")
}

model UserReport {
    id String @id @default(cuid())

    message String
    images  ReportImage[]

    denounced    User   @relation(fields: [denounced_id], references: [id])
    denounced_id String

    denouncer    Company @relation(fields: [denouncer_id], references: [id])
    denouncer_id String

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    @@map("users_reports")
}

model ReportImage {
    id        String @id @default(cuid())
    image_url String

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    companies_reports    CompanyReport? @relation(fields: [companies_reports_id], references: [id])
    companies_reports_id String?

    users_reports    UserReport? @relation(fields: [users_reports_id], references: [id])
    users_reports_id String?

    @@map("report_images")
}

model UserNotification {
    id String @id @default(cuid())

    content String

    user    User   @relation(fields: [user_id], references: [id])
    user_id String

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    @@map("users_notifications")
}

model CompanyNotification {
    id String @id @default(cuid())

    content String

    company    Company @relation(fields: [company_id], references: [id])
    company_id String

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    @@map("companies_notifications")
}

model BannedUser {
    id String @id @default(cuid())

    reason String

    user    User   @relation(fields: [user_id], references: [id])
    user_id String

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    @@map("banned_users")
}

model BannedCompany {
    id String @id @default(cuid())

    reason String

    company    Company @relation(fields: [company_id], references: [id])
    company_id String

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    @@map("banned_companies")
}
